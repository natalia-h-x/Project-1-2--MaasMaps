@startuml

skinparam linetype ortho
!theme reddress-darkblue
' skinparam nodesep 10
skinparam ranksep 20
left to right direction
skinparam backgroundcolor transparent

+class AStarAlgorithm extends PathStrategy {
    -{static}{static}double SCALING_FACTOR = 0.0001
    +Transport[] getShortestPath(Graph<T> graph, T source, T end, Time startTime, Time maxWalkingTime) throws IllegalArgumentException
    -Comparator<? super T> getHeuristicComparator(T source, T end)
    -double getFitness(T current, T source, T end)
    +String toString()
}
+class DijkstraAlgorithm extends PathStrategy {
    +Transport[] getShortestPath(Graph<T> graph, T source, T end, Time startTime, Time maxWalkingTime) throws IllegalArgumentException
    +Transport[] shortestPath(Graph<T> graph, T source, T end, Time startTime, Comparator<? super T> heuristic, int maxWalkingTime) throws IllegalArgumentException
    +String toString()
}
+class PathStrategy {
    -{static}Map<Bus, Optional<Route>> shortestPaths = new HashMap<>()
    +abstract Transport[] getShortestPath(Graph<T> graph, T source, T end, Time startTime, Time maxWalking) throws IllegalArgumentException
    +Optional<Route> calculateShortestPath(Bus bus)
    +abstract String toString()
}

AStarAlgorithm -[#DarkSlateGrey]-* Graph: use
AStarAlgorithm -[#DarkSlateGrey]-* Time: use
AStarAlgorithm -[#DarkSlateGrey]-* Transport: use
DijkstraAlgorithm -[#DarkSlateGrey]-* TriMonoid: use
DijkstraAlgorithm -[#DarkSlateGrey]-* Edge: use
DijkstraAlgorithm -[#DarkSlateGrey]-* Graph: use
DijkstraAlgorithm -[#DarkSlateGrey]-* Weight: use
DijkstraAlgorithm -[#DarkSlateGrey]-* BusStop: use
DijkstraAlgorithm -[#DarkSlateGrey]-* Time: use
DijkstraAlgorithm -[#DarkSlateGrey]-* Trip: use
DijkstraAlgorithm -[#DarkSlateGrey]-* Bus: use
DijkstraAlgorithm -[#DarkSlateGrey]-* Transport: use
PathStrategy -[#DarkSlateGrey]-* Graph: use
PathStrategy -[#DarkSlateGrey]-* MapManager: use
PathStrategy -[#DarkSlateGrey]-* PostalCodeManager: use
PathStrategy -[#DarkSlateGrey]-* Location: use
PathStrategy -[#DarkSlateGrey]-* Time: use
PathStrategy -[#DarkSlateGrey]-* Bus: use
PathStrategy -[#DarkSlateGrey]-* Route: use
PathStrategy -[#DarkSlateGrey]-* Transport: use
PathStrategy -[#DarkSlateGrey]-* Walking: use

@enduml